[
  {"body": "progressive enhancement"},
  {"body": "functionality"},
  {"body": "presentation layer"},
  {"body": "server-side rendering"},
  {"body": "interactive portions"},
  {"body": "functional experience"},
  {"body": "code sharing"},
  {"body": "render content"},
  {"body": "baked-in support"},
  {"body": "perceived user experience"},
  {"body": "passed as props"},
  {"body": "browsers support"},
  {"body": "object-level format"},
  {"body": "mapping to the current route"},
  {"body": "load up data"},
  {"body": "shipped down"},
  {"body": "route-based chunking"},
  {"body": "populate bootup data"},
  {"body": "bottleneck"},
  {"body": "not about making the web work for users without JavaScript turned on"},
  {"body": "SEO"},
  {"body": "lie-fi"},
  {"body": "universal JavaScript"},
  {"body": "popular"},
  {"body": "guides"},
  {"body": "React Router supports this very well"},
  {"body": "isomorphic-fetch"},
  {"body": "application Shell architecture"},
  {"body": "flipkart"},
  {"body": "skeleton screens"},
  {"body": "SSR perf"},
  {"body": "support for ‘statics’"},
  {"body": "match"},
  {"body": "RouterContext"},
  {"body": "layers"},
  {"body": "network throttling"},
  {"body": "that’s a wrap"},
  {"body": "a reasonable approach"},
  {"body": "iterate through"},
  {"body": "a quick snippet"},
  {"body": "universal data-fetching"},
  {"body": "common solution"},
  {"body": "best practices"},
  {"body": "populate"},
  {"body": "named-arguments style calls"},
  {"body": "function"},
  {"body": "lowercase"},
  {"body": "map"},
  {"body": "fetch"},
  {"body": "request"},
  {"body": "pending"},
  {"body": "npm install"},
  {"body": "represent remote pieces of data"},
  {"body": "released on GitHub"},
  {"body": "define"},
  {"body": "possible states"},
  {"body": "logging an error"},
  {"body": "instance"},
  {"body": "Under the hood"},
  {"body": "source of the library"},
  {"body": "powerful"},
  {"body": "abstract"},
  {"body": "regular expression"},
  {"body": "very easy"},
  {"body": "different sequence"},
  {"body": "those docs"},
  {"body": "standardized naming conventions"},
  {"body": "destructured"},
  {"body": "performance"},
  {"body": "estimated input latency"},
  {"body": "network-bound"},
  {"body": "fast experience"},
  {"body": "loaded on demand"},
  {"body": "improves startup time"},
  {"body": "interactive"},
  {"body": "preloaded"},
  {"body": "async"},
  {"body": "OMG beautiful"},
  {"body": "boilerplate"},
  {"body": "great kudos"},
  {"body": "granular chunks"},
  {"body": "network cache"},
  {"body": "pre-caching"},
  {"body": "initial route"},
  {"body": "long-term caching"},
  {"body": "cache-busting"},
  {"body": "codebases"},
  {"body": "block-scoping"},
  {"body": "separation of concerns"},
  {"body": "hashing"},
  {"body": "improve the UX"},
  {"body": "coffee"},
  {"body": "scalability issues"},
  {"body": "hello world"},
  {"body": "caffeine powered"},
  {"body": "scaffold"},
  {"body": "bootstraped"},
  {"body": "following conventions"},
  {"body": "init"},
  {"body": "application integration"},
  {"body": "design pattern"},
  {"body": "development environment"},
  {"body": "elegant solution"},
  {"body": "ergonomics"},
  {"body": "feature creep"},
  {"body": "functional programming"},
  {"body": "get-something-started approach"},
  {"body": "business results"},
  {"body": "evaluation of expressions"},
  {"body": "functional specification"},
  {"body": "gap analysis"},
  {"body": "gold code"},
  {"body": "hotfix"},
  {"body": "information design"},
  {"body": "hierarchical model"},
  {"body": "iterative"},
  {"body": "KISS Principle"},
  {"body": "lean programming"},
  {"body": "legacy application"},
  {"body": "object-oriented"},
  {"body": "open source"},
  {"body": "outsourcing"},
  {"body": "peer review"},
  {"body": "portability"},
  {"body": "prototyping"},
  {"body": "pseudocode"},
  {"body": "refactor"},
  {"body": "SDK"},
  {"body": "shotgun debugging"},
  {"body": "spaghetti code"},
  {"body": "development life cycle"},
  {"body": "stabilizing"},
  {"body": "RAD"},
  {"body": "agile"},
  {"body": "waterfall model"},
  {"body": "write-only code"},
  {"body": "antipattern"},
  {"body": "API"},
  {"body": "aspect-oriented programming"},
  {"body": "and"},
  {"body": "then"},
  {"body": "when"},
  {"body": "if"},
  {"body": "else"},
  {"body": "or"},
  {"body": "to"},
  {"body": "performance"},
  {"body": "top-level"},
  {"body": "transferable"},
  {"body": "methodology"},
  {"body": "data objects"},
  {"body": "build tool"},
  {"body": "embedded systems"},
  {"body": "enterprise"},
  {"body": "entities"},
  {"body": "wtf"},
  {"body": "this"},
  {"body": "while"},
  {"body": "who"},
  {"body": "push"},
  {"body": "pull"},
  {"body": "lightweight"},
  {"body": "language-independent"},
  {"body": "salting"},
  {"body": "scrum"},
  {"body": "sprint"},
  {"body": "version control"},
  {"body": "TDD"},
  {"body": "intensive learning environment"},
  {"body": "cli much bro"},
  {"body": "plugin"},
  {"body": "preset"},
  {"body": "syntactical sugar"},
  {"body": "string interpolation"},
  {"body": "typo"},
  {"body": "brute-force"},
  {"body": "raw"},
  {"body": "maintainability"},
  {"body": "two-way data-binding"},
  {"body": "out-of-the-box"},
  {"body": "third-party-developed modules"},
  {"body": "sanitizing"},
  {"body": "cross-platform"},
  {"body": "underlying complexity"},
  {"body": "has"},
  {"body": "had"},
  {"body": "documentation"},
  {"body": "isolate scope"},
  {"body": "directive"},
  {"body": "transclusion"},
  {"body": "dependency injection"},
  {"body": "templating"},
  {"body": "modularizing"},
  {"body": "readable"},
  {"body": "IIFE"},
  {"body": "optimization"},
  {"body": "CMS"},
  {"body": "without"},
  {"body": "unless"},
  {"body": "not"},
  {"body": "through"},
  {"body": "tho"},
  {"body": "why tho"},
  {"body": "OOP"},
  {"body": "libs"},
  {"body": "smooth"},
  {"body": "is"},
  {"body": "was"},
  {"body": "without"}
]
